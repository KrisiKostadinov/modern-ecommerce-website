datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?           @default(USER)
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Token     Token[]
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Token {
  id        String   @id @default(uuid()) @map("_id")
  token     String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Category {
  id              String          @id @default(uuid()) @map("_id")
  name            String          @unique
  slug            String          @unique
  description     String?
  imageUrl        String?         @map("image_url")
  places          CategoryPlace[] @default([CATEGORIES_PAGE])
  metaTitle       String?         @map("meta_title")
  metaDescription String?         @map("meta_description")
  metaKeywords    String?         @map("meta_keywords")
  createdAt       DateTime        @default(now()) @map("created_at")
}

enum CategoryPlace {
  HOME_PAGE
  CATEGORIES_PAGE
  NAVBAR
  FOOTER
}

model Image {
  id    String  @id @default(uuid()) @map("_id")
  url   String
  alt   String?
  title String?
  size  Int?
  type  String?
  key   String
}

model Product {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String        @unique
  slug            String        @unique
  originalPrice   Float?        @map("original_price")
  sellingPrice    Float?        @map("selling_price")
  deliveryPrice   Float?        @map("delivery_price")
  finalPrice      Float?        @map("final_price")
  isPromo         Boolean       @default(false)
  quantity        Int           @default(1)
  description     String?
  categoryIds     String[]      @map("category_ids")
  categoryId      String?
  thumbnailImage  String?       @map("thumbnail_image")
  images          String[]      @default([])
  metaTitle       String?       @map("meta_title")
  metaDescription String?       @map("meta_description")
  metaKeywords    String?       @map("meta_keywords")
  status          ProductStatus @default(ACTIVE)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String         @unique
  fullname        String
  email           String
  deliveryCity    String
  deliveryAddress String
  phoneNumber     String
  paymentMethod   PaymentMethod  @default(CASH)
  deliveryMethod  DeliveryMethod @default(STANDART)
  status          OrderStatus    @default(CONFIRMED)
  paymentStatus   PaymentStatus  @default(PENDING)
  totalAmount     Float
  createdAt       DateTime       @default(now())
  customerNote    String?
  orderProducts   Json
}

enum PaymentMethod {
  CASH
}

enum OrderStatus {
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  PENDING
}

enum DeliveryMethod {
  STANDART
  EXPRESS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}